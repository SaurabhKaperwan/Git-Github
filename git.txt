git:
version control
to track changes
create savepoints

This is local implementaion of git:
-----------------------------------
git init => initialize git repo (now our directory becomes working directory)

ls -a => to see hidden files

git status => to see which files are tracked(staging area)
and which files are not tracked

git add filename => to track or add it to staging area

git add . => add everything directory in staging area

git add => put files in staging area

git commit -m "message" => to commit changes

git commit => save in local repo

git log => to see all commits done by anyone

git diff filename => to see difference b/w last savepoint and current condition of file

git checkout filename => revert back to savepoint


For remote repo:
----------------
Use github

push a existing repo from command line:

creating a remote repo and tranferring all commits:
git remote add origin repo-addr

origin => name of the remote(can be anything)

github password support is discontinued.

Therefore we use PAT(Personal Access Token)
git remote set-url origin https://token@github.com/SaurabhKaperwan/repo-name


push local repo on remote repo
git push -u origin master

master => name of branch

master branch => main branch

local repo is the git file

remote repo is github


Gitignore:
----------

touch .gitignore

Remove all files from staging area:
git rm --cached -r .

-r flag for recursive
-f force removal


Clonning:
---------

clone a remote repo & store files in local working directory

git clone repo-url

u can use :
git log

Branching:
----------
when we want to do experiment we make a different branch.

Create a branch:
git branch branch-name

Switch from main branch to different branch:

git checkout branch-name

Show branch name u r working:
git branch


Merging Branch:
---------------

Go back to master:

git checkout master

